#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2010-2017 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  See LICENSE file for license information.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/apache2/config_options'

def main
  comment copyright_header_for(__FILE__), 1

  separator

  comment %q{
    ConfigGeneral/AutoGeneratedDefinitions.cpp is automatically generated from
    ConfigGeneral/AutoGeneratedDefinitions.cpp.cxxcodebuilder,
    using ConfigGeneral/AutoGenerateddefinitions from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
    Edits to ConfigGeneral/AutoGeneratedDefinitions.cpp will be lost.

    To update ConfigGeneral/AutoGeneratedDefinitions.cpp:
      rake apache2

    To force regeneration of ConfigGeneral/AutoGeneratedDefinitions.cpp:
      rm -f src/apache2_module/ConfigGeneral/AutoGeneratedDefinitions.cpp
      rake src/apache2_module/ConfigGeneral/AutoGeneratedDefinitions.cpp
  }

  separator

  APACHE2_CONFIGURATION_OPTIONS.each do |option|
    option = resolve_possible_alias(option)
    format =
      "%s(%s,\n" \
      "\t(%s) %s,\n" \
      "\tNULL,\n" \
      "\t%s,\n" \
      "\t%s),\n"
    code = sprintf(format,
      macro_for(option),
      name_for(option),
      function_type_for(option),
      function_for(option),
      definition_context_for(option),
      description_for(option))
    add_code(code)
  end
end

def resolve_possible_alias(option)
  if option[:alias_for]
    the_alias = APACHE2_CONFIGURATION_OPTIONS.find do |o|
      o[:name] == option[:alias_for]
    end.dup
    the_alias[:aliased_for] = option[:name]
    the_alias
  else
    option
  end
end

def macro_for(option)
  case option[:type]
  when :string, :integer, :string_array, :string_set
    "AP_INIT_TAKE1"
  when :string_keyval
    "AP_INIT_TAKE2"
  when :flag
    "AP_INIT_FLAG"
  else
    raise "Unknown type #{option[:type].inspect} for option #{option[:name].inspect}"
  end
end

def name_for(option)
  str_val(option[:aliased_for] || option[:name])
end

def function_type_for(option)
  case option[:type]
  when :string, :integer, :string_array, :string_set
    "Take1Func"
  when :string_keyval
    "Take2Func"
  when :flag
    "FlagFunc"
  else
    raise "Unknown type #{option[:type].inspect}"
  end
end

def function_for(option)
  if option[:function]
    option[:function]
  else
    function_name = option[:name].gsub(/[A-Z]/) do |letter|
      "_" + letter[0..0].downcase
    end
    "cmd#{function_name}"
  end
end

def definition_context_for(option)
  case option[:context]
  when :global
    'RSRC_CONF'
  when :application
    'RSRC_CONF | ACCESS_CONF'
  when :location
    result = ['RSRC_CONF', 'ACCESS_CONF', option[:htaccess_context]]
    result.flatten.join(' | ')
  else
    raise "Unknown context #{option[:context].inspect}"
  end
end

def description_for(option)
  option[:desc].inspect
end

main

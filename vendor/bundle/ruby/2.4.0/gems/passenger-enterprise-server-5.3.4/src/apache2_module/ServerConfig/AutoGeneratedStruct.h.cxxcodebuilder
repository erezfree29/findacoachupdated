#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2017 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  See LICENSE file for license information.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/apache2/config_options'

def main
  comment copyright_header_for(__FILE__), 1

  separator

  comment %q{
    ServerConfig/AutoGeneratedStruct.h is automatically generated from ServerConfig/AutoGeneratedStruct.h.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
    Edits to ServerConfig/AutoGeneratedStruct.h will be lost.

    To update ServerConfig/AutoGeneratedStruct.h:
      rake apache2

    To force regeneration of ServerConfig/AutoGeneratedStruct.h:
      rm -f src/apache2_module/ServerConfig/AutoGeneratedStruct.h
      rake src/apache2_module/ServerConfig/AutoGeneratedStruct.h
  }

  separator

  struct 'AutoGeneratedServerConfig' do
    definitions.each do |definition|
      separator
      comment(definition[3][:desc])
      field(definition[0])
    end

    separator
    separator

    definitions.each do |definition|
      field("StaticString #{definition[2]}SourceFile")
    end

    separator

    definitions.each do |definition|
      field("unsigned int #{definition[2]}SourceLine")
    end

    separator

    definitions.each do |definition|
      field("bool #{definition[2]}ExplicitlySet: 1")
    end

    separator

    function 'AutoGeneratedServerConfig()' do
      definitions.each do |definition|
        add_field_initializer_code(definition)
      end

      separator

      definitions.each do |definition|
        add_field_source_line_initializer_code(definition)
      end

      separator

      definitions.each do |definition|
        add_field_explicitly_set_initializer_code(definition)
      end
    end
  end
end

def filter_eligible_options(options)
  options.reject do |option|
    option[:alias_for] ||
      option[:obsolete] ||
      option[:context] != :global ||
      option.fetch(:field, true).nil? ||
      option[:field].to_s =~ /\./
  end
end

def struct_field_for(option)
  if option.key?(:field)
    option[:field]
  else
    result = option[:name].sub(/^Passenger/, '')
    result[0] = result[0..0].downcase
    result
  end
end

# Returns [definition_source, estimated_size_on_x86_64, name, option]
def definition_for(option)
  field = struct_field_for(option)
  case option[:type]
  when :string
    result = ["StaticString #{field}", 8 + 4, field]
  when :integer
    result = ["int #{field}", 4, field]
  when :flag
    result = ["bool #{field}", 1, field]
  when :string_set
    result = ["std::set<std::string> #{field}", 24, field]
  else
    raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
  end
  result + [option]
end

def definitions
  @definitions ||= begin
    eligible_options = filter_eligible_options(APACHE2_CONFIGURATION_OPTIONS)
    definitions = eligible_options.map { |o| definition_for(o) }
    # Sort the definitions by size in order to make the struct smaller.
    # It's possible to make it even smaller with a smarter algorithm but for now
    # I don't bother.
    definitions.sort! do |d1, d2|
      if d1[1] == d2[1]
        # After sorting on size, sort alphabetically.
        d1[2] <=> d2[2]
      else
        d1[1] <=> d2[1]
      end
    end
  end
end

def add_field_initializer_code(definition)
  field_name = definition[2]
  option = definition[3]

  if option[:default_expr]
    add_code %Q{
      #{field_name} = #{option[:default_expr]};
    }
    return
  elsif option[:default]
    add_code %Q{
      #{field_name} = #{option[:default].inspect};
    }
    return
  end

  case option[:type]
  when :integer
    add_code %Q{
      #{field_name} = 0;
    }
  when :flag
    add_code %Q{
      #{field_name} = false;
    }
  when :string, :string_keyval, :string_array, :string_set
    comment "#{field_name}: default initialized"
  else
    raise "Unknown type #{option[:type].inspect}"
  end
end

def add_field_source_line_initializer_code(definition)
  field_name = definition[2]
  add_code %Q{
    #{field_name}SourceLine = 0;
  }
end

def add_field_explicitly_set_initializer_code(definition)
  field_name = definition[2]
  add_code %Q{
    #{field_name}ExplicitlySet = false;
  }
end

main

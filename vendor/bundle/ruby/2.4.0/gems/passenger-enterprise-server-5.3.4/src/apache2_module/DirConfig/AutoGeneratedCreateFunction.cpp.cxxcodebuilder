#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2010-2017 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  See LICENSE file for license information.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/apache2/config_options'

def main
  comment copyright_header_for(__FILE__), 1

  separator

  comment %q{
    DirConfig/AutoGeneratedCreateFunction.cpp is automatically generated from DirConfig/AutoGeneratedCreateFunction.cpp.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
    Edits to DirConfig/AutoGeneratedCreateFunction.cpp will be lost.

    To update DirConfig/AutoGeneratedCreateFunction.cpp:
      rake apache2

    To force regeneration of DirConfig/AutoGeneratedCreateFunction.cpp:
      rm -f src/apache2_module/DirConfig/AutoGeneratedCreateFunction.cpp
      rake src/apache2_module/DirConfig/AutoGeneratedCreateFunction.cpp
  }

  separator

  add_code %Q[
    namespace Passenger {
    namespace Apache2Module {
  ]

  separator

  function 'static void createDirConfig_autoGenerated(DirConfig *config)' do
    options = filter_eligible_options(APACHE2_CONFIGURATION_OPTIONS)

    options.each do |option|
      field_name = struct_field_for(option)
      case option[:type]
      when :integer
        add_code("config->#{field_name} = UNSET_INT_VALUE;")
      when :flag
        add_code("config->#{field_name} = Apache2Module::UNSET;")
      when :string, :string_keyval, :string_array, :string_set
        comment("config->#{field_name}: default initialized")
      else
        raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
      end
    end

    separator

    options.each do |option|
      field_name = struct_field_for(option)
      add_code %Q{
        config->#{field_name}SourceLine = 0;
      }
    end

    separator

    options.each do |option|
      field_name = struct_field_for(option)
      add_code %Q{
        config->#{field_name}ExplicitlySet = false;
      }
    end
  end

  separator

  add_code %Q[
    } // namespace Apache2Module
    } // namespace Passenger
  ]
end

def filter_eligible_options(options)
  options.reject do |option|
    option[:alias_for] ||
      option[:obsolete] ||
      option[:context] == :global ||
      option.fetch(:field, true).nil?
  end
end

def struct_field_for(option)
  if option.key?(:field)
    option[:field]
  else
    result = option[:name].sub(/^Passenger/, '')
    "m#{result}"
  end
end

main
